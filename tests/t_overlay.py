#!/usr/bin/python
# -*- coding: utf-8 -*-
###############################################################################
# Copyright:
#             (c) 2013 Jauhien Piatlicki
#             Distributed under the terms of the GNU General Public License v2
#
# Author(s):
#             Jauhien Piatlicki <piatlicki@gmail.com>

import os, shutil, stat, tempfile, unittest

from g_common.overlay import GCommon, Driver

from utils import get_pkgpath, cp_and_replace, test_file, test_manifest

class TestGCommon(unittest.TestCase):
    """Test g_common.overlay.GCommon"""

    def setUp(self):
        self.workdir = tempfile.mkdtemp()
        self.overlay = os.path.join(self.workdir, "test_overlay")
        self.datadir = 'data'
        self.method = 'test'
        self.uri = 'test://test'
        self.testcfg = 'test.cfg'
        self.testsh = 'test.sh'
        self.tstargs = os.path.join(self.workdir, 'tst.args')
        os.makedirs(self.overlay)
        self.testcfg_dest = None
        self.testsh_dest = None
        self.sync_args = [self.overlay, 'sync', self.method, self.uri]
        self.generate_tree_args = [self.overlay, 'generate-tree']
        self.create_test_driver()
        self.g_common = GCommon()
        self.g_common.configdir = self.workdir

    def create_test_driver(self):
        datadir = os.path.join(get_pkgpath(), self.datadir)
        testcfg = os.path.join(datadir, self.testcfg)
        self.testcfg_dest = os.path.join(self.workdir, self.testcfg)
        self.testsh_dest = os.path.join(self.workdir, self.testsh)
        testsh = os.path.join(datadir, self.testsh)
        cp_and_replace(testcfg, self.testcfg_dest, [['<EXEC>', self.testsh_dest]])
        cp_and_replace(testsh, self.testsh_dest)
        os.chmod(self.testsh_dest, stat.S_IEXEC | stat.S_IWRITE | stat.S_IREAD)

    def remove_test_driver(self):
        os.remove(self.testcfg_dest)
        os.remove(self.testsh_dest)

    def test(self):
        self.assertEqual(self.g_common(self.sync_args), 0)
        with open(self.tstargs, 'r') as f:
            s = f.read()
        self.assertEqual(s.replace('\n',''),
                         "".join(self.sync_args))
        self.assertEqual(self.g_common(self.generate_tree_args), 0)
        with open(self.tstargs, 'r') as f:
            s = f.read()
        self.assertEqual(s.replace('\n',''),
                         "".join(self.generate_tree_args))

    def tearDown(self):
        os.remove(self.tstargs)
        shutil.rmtree(os.path.join(self.overlay, self.g_common.datadir))
        self.remove_test_driver()
        os.rmdir(self.overlay)
        os.rmdir(self.workdir)

class GTest(Driver):
    def __init__(self, eclasses, ebuilds):
        super().__init__()
        self.eclasses = eclasses
        self.ebuilds = ebuilds
        self.overlay = None
        self.method = None
        self.uri = None
    
    def sync(self, args):
        self.overlay = args.overlay
        self.method = args.method
        self.uri = args.uri
        return 0
    
    def list_eclasses(self):
        return [i for i in self.eclasses]

    def get_eclass(self, eclass):
        return self.eclasses[eclass]

    def list_ebuilds(self):
        return [i for i in self.ebuilds]

    def get_ebuild(self, ebuild):
        return self.ebuilds[ebuild]


class TestDriver(unittest.TestCase):
    """Test g_common.overlay.Driver"""
    
    def setUp(self):
        self.eclasses = {
            'test1' : ['test1', 'test1'],
            'test2' : ['test2', 'test2'],
            }
        self.ebuild = ["# automatically generated by g-test"
                      "# please do not edit this file",
                      "",
                      "EAPI=5",
                      "",
                      'DESCRIPTION="' + 'test' + '"',
                      'HOMEPAGE="' + 'http://test.test' + '"',
                      'SRC_URI=""',
                      'LICENSE="GPL-2"',
                      "",
                      'SLOT="0"',
                      'KEYWORDS="~amd64 ~x86"',
                      'IUSE=""',
                      "",
                      "",
                      'DEPEND=""',
                      'RDEPEND="${DEPEND}"',
                      ]
        self.ebuilds = {
            ('app-portage', 'test1', '0') : self.ebuild,
            ('app-portage', 'test1', '1') : self.ebuild,
            ('app-emacs', 'test1', '0') : self.ebuild,
            ('app-emacs', 'test2', '1') : self.ebuild,
            }
        self.workdir = tempfile.mkdtemp()
        self.overlay = os.path.join(self.workdir, "test_overlay")
        self.name = os.path.split(self.overlay)[1]
        self.method = 'test'
        self.uri = 'test://test'
        self.g_test = GTest(self.eclasses, self.ebuilds)
        self.sync_args = [self.overlay, 'sync', self.method, self.uri]
        self.generate_tree_args = [self.overlay, 'generate-tree']

    def test(self):
        self.assertEqual(self.g_test(self.sync_args), 0)
        self.assertEqual(self.g_test.overlay, self.overlay)
        self.assertEqual(self.g_test.method, self.method)
        self.assertEqual(self.g_test.uri, self.uri)
        self.assertEqual(self.g_test(self.generate_tree_args), 0)
        self.assertEqual(test_file(os.path.join(self.overlay, 'profiles', 'repo_name'), [self.name]),
                         True)
        if self.eclasses is not []:
            self.assertEqual(os.path.exists(os.path.join(self.overlay, 'eclass')), True)
        for name, src in self.eclasses.items():
            self.assertEqual(test_file(os.path.join(self.overlay, 'eclass', name + '.eclass'), src), True)
        for ebuild, src in self.ebuilds.items():
            self.assertEqual(os.path.exists(os.path.join(self.overlay, ebuild[0])), True)
            self.assertEqual(test_file(os.path.join(self.overlay,
                                                    ebuild[0], ebuild[1], ebuild[1]+'-'+ebuild[2]+'.ebuild'),
                                       src), True)
            self.assertEqual(test_manifest(os.path.join(self.overlay, ebuild[0], ebuild[1])), True)
    
    def tearDown(self):
        shutil.rmtree(self.overlay)
        os.rmdir(self.workdir)
